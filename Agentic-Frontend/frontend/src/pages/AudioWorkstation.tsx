import React, { useState, useRef } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Chip,
  Alert,
  Skeleton,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  LinearProgress,
  Avatar,
  Divider,
  Tabs,
  Tab,
  InputAdornment,
  CardMedia,
} from '@mui/material';
import {
  Audiotrack,
  Mic,
  MusicNote,
  SentimentSatisfied,
  GraphicEq,
  PlayArrow,
  Pause,
  Stop,
  Upload,
  Refresh,
  Settings,
  Assessment,
  Timeline,
  VolumeUp,
} from '@mui/icons-material';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import apiClient from '../services/api';

// Define audio AI types locally for now
interface TranscriptionResult {
  transcription_id: string;
  text: string;
  language: string;
  confidence: number;
  duration: number;
  segments: Array<{
    start: number;
    end: number;
    text: string;
    confidence: number;
  }>;
  speakers?: Array<{
    speaker_id: string;
    segments: Array<[number, number]>;
  }>;
}

interface EmotionAnalysis {
  emotion_analysis_id: string;
  emotions: Array<{
    emotion: string;
    confidence: number;
    timestamp: number;
  }>;
  overall_sentiment: string;
  dominant_emotion: string;
  processing_time_ms: number;
}

interface SpeakerIdentification {
  speaker_id: string;
  speakers: Array<{
    speaker_id: string;
    confidence: number;
    segments: Array<[number, number]>;
    estimated_age?: number;
    estimated_gender?: string;
  }>;
  total_speakers: number;
}

interface MusicAnalysis {
  music_analysis_id: string;
  genre: string;
  tempo: number;
  key: string;
  mood: string;
  instruments: string[];
  features: {
    danceability: number;
    energy: number;
    valence: number;
    acousticness: number;
  };
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`audio-tabpanel-${index}`}
      aria-labelledby={`audio-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const AudioWorkstation: React.FC = () => {
  const queryClient = useQueryClient();
  const [tabValue, setTabValue] = useState(0);
  const [selectedAudio, setSelectedAudio] = useState<File | null>(null);
  const [audioPreview, setAudioPreview] = useState<string>('');
  const [isPlaying, setIsPlaying] = useState(false);
  const [showSettingsDialog, setShowSettingsDialog] = useState(false);
  const [transcriptionModel, setTranscriptionModel] = useState('whisper-large-v3');
  const audioRef = useRef<HTMLAudioElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Transcription Query - Using placeholder for now
  const {
    data: transcription,
    isLoading: transcriptionLoading,
    refetch: refetchTranscription,
  } = useQuery<TranscriptionResult>({
    queryKey: ['transcription', selectedAudio],
    queryFn: async () => {
      if (!selectedAudio) throw new Error('No audio selected');
      // Placeholder implementation
      await new Promise(resolve => setTimeout(resolve, 2000));
      return {
        transcription_id: 'trans_123',
        text: 'This is a sample transcription of the uploaded audio file. The actual transcription would be generated by the Whisper model.',
        language: 'en',
        confidence: 0.95,
        duration: 10.5,
        segments: [
          { start: 0, end: 2.5, text: 'This is a sample', confidence: 0.98 },
          { start: 2.5, end: 5.0, text: 'transcription of the', confidence: 0.96 },
          { start: 5.0, end: 7.5, text: 'uploaded audio file.', confidence: 0.94 },
          { start: 7.5, end: 10.5, text: 'The actual transcription', confidence: 0.97 },
        ],
        speakers: [
          { speaker_id: 'speaker_1', segments: [[0, 10.5]] }
        ]
      };
    },
    enabled: !!selectedAudio && tabValue === 0,
  });

  // Emotion Analysis Query - Using placeholder for now
  const {
    data: emotionAnalysis,
    isLoading: emotionLoading,
    refetch: refetchEmotion,
  } = useQuery<EmotionAnalysis>({
    queryKey: ['emotion-analysis', selectedAudio],
    queryFn: async () => {
      if (!selectedAudio) throw new Error('No audio selected');
      // Placeholder implementation
      await new Promise(resolve => setTimeout(resolve, 1500));
      return {
        emotion_analysis_id: 'emotion_123',
        emotions: [
          { emotion: 'neutral', confidence: 0.7, timestamp: 0 },
          { emotion: 'happy', confidence: 0.8, timestamp: 2.5 },
          { emotion: 'surprise', confidence: 0.6, timestamp: 5.0 },
        ],
        overall_sentiment: 'positive',
        dominant_emotion: 'happy',
        processing_time_ms: 1200
      };
    },
    enabled: !!selectedAudio && tabValue === 1,
  });

  // Speaker Identification Query - Using placeholder for now
  const {
    data: speakerId,
    isLoading: speakerLoading,
    refetch: refetchSpeaker,
  } = useQuery<SpeakerIdentification>({
    queryKey: ['speaker-identification', selectedAudio],
    queryFn: async () => {
      if (!selectedAudio) throw new Error('No audio selected');
      // Placeholder implementation
      await new Promise(resolve => setTimeout(resolve, 1800));
      return {
        speaker_id: 'speaker_analysis_123',
        speakers: [
          { speaker_id: 'speaker_1', confidence: 0.92, segments: [[0, 5.2]], estimated_age: 35, estimated_gender: 'male' },
          { speaker_id: 'speaker_2', confidence: 0.88, segments: [[5.5, 10.5]], estimated_age: 28, estimated_gender: 'female' }
        ],
        total_speakers: 2
      };
    },
    enabled: !!selectedAudio && tabValue === 2,
  });

  // Music Analysis Query - Using placeholder for now
  const {
    data: musicAnalysis,
    isLoading: musicLoading,
    refetch: refetchMusic,
  } = useQuery<MusicAnalysis>({
    queryKey: ['music-analysis', selectedAudio],
    queryFn: async () => {
      if (!selectedAudio) throw new Error('No audio selected');
      // Placeholder implementation
      await new Promise(resolve => setTimeout(resolve, 1600));
      return {
        music_analysis_id: 'music_123',
        genre: 'Pop',
        tempo: 120,
        key: 'C Major',
        mood: 'Upbeat',
        instruments: ['Piano', 'Guitar', 'Drums', 'Bass'],
        features: {
          danceability: 0.75,
          energy: 0.82,
          valence: 0.68,
          acousticness: 0.15
        }
      };
    },
    enabled: !!selectedAudio && tabValue === 3,
  });

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedAudio(file);
      const url = URL.createObjectURL(file);
      setAudioPreview(url);
    }
  };

  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  const handlePlayPause = () => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause();
      } else {
        audioRef.current.play();
      }
      setIsPlaying(!isPlaying);
    }
  };

  const handleStop = () => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setIsPlaying(false);
    }
  };

  const handleRefresh = () => {
    if (tabValue === 0) refetchTranscription();
    else if (tabValue === 1) refetchEmotion();
    else if (tabValue === 2) refetchSpeaker();
    else if (tabValue === 3) refetchMusic();
  };

  const handleClearAudio = () => {
    setSelectedAudio(null);
    setAudioPreview('');
    setIsPlaying(false);
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
    }
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const getEmotionColor = (emotion: string) => {
    switch (emotion.toLowerCase()) {
      case 'happy':
      case 'joy':
        return 'success';
      case 'sad':
      case 'anger':
        return 'error';
      case 'neutral':
        return 'default';
      case 'surprise':
        return 'warning';
      case 'fear':
        return 'secondary';
      default:
        return 'primary';
    }
  };

  return (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
        <Box>
          <Typography variant="h4" sx={{ fontWeight: 700, mb: 1 }}>
            Audio AI Workstation
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Advanced audio processing with speech recognition, emotion analysis, and music intelligence.
          </Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            startIcon={<Settings />}
            onClick={() => setShowSettingsDialog(true)}
          >
            Settings
          </Button>
          <Button
            variant="outlined"
            startIcon={<Refresh />}
            onClick={handleRefresh}
            disabled={!selectedAudio}
          >
            Refresh
          </Button>
        </Box>
      </Box>

      {/* Audio Upload Section */}
      <Card elevation={0} sx={{ mb: 4 }}>
        <CardContent>
          <Grid container spacing={3} alignItems="center">
            <Grid item xs={12} md={8}>
              <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="audio/*"
                  onChange={handleFileSelect}
                  style={{ display: 'none' }}
                />
                <Button
                  variant="outlined"
                  startIcon={<Upload />}
                  onClick={handleUploadClick}
                  sx={{ minWidth: 200 }}
                >
                  Upload Audio
                </Button>
                {selectedAudio && (
                  <>
                    <Button
                      variant="outlined"
                      color="error"
                      onClick={handleClearAudio}
                    >
                      Clear
                    </Button>
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <IconButton onClick={handlePlayPause} disabled={!audioPreview}>
                        {isPlaying ? <Pause /> : <PlayArrow />}
                      </IconButton>
                      <IconButton onClick={handleStop} disabled={!audioPreview}>
                        <Stop />
                      </IconButton>
                    </Box>
                  </>
                )}
                <FormControl sx={{ minWidth: 150 }}>
                  <InputLabel>Model</InputLabel>
                  <Select
                    value={transcriptionModel}
                    label="Model"
                    onChange={(e) => setTranscriptionModel(e.target.value)}
                  >
                    <MenuItem value="whisper-large-v3">Whisper Large V3</MenuItem>
                    <MenuItem value="whisper-base">Whisper Base</MenuItem>
                    <MenuItem value="whisper-medium">Whisper Medium</MenuItem>
                  </Select>
                </FormControl>
              </Box>
            </Grid>
            <Grid item xs={12} md={4}>
              {selectedAudio && (
                <Typography variant="body2" color="text.secondary">
                  Selected: {selectedAudio.name} ({(selectedAudio.size / 1024 / 1024).toFixed(2)} MB)
                </Typography>
              )}
            </Grid>
          </Grid>

          {/* Audio Player */}
          {audioPreview && (
            <Box sx={{ mt: 3, textAlign: 'center' }}>
              <Card sx={{ maxWidth: 600, mx: 'auto' }}>
                <CardContent>
                  <audio
                    ref={audioRef}
                    src={audioPreview}
                    onEnded={() => setIsPlaying(false)}
                    style={{ width: '100%' }}
                    controls
                  />
                </CardContent>
              </Card>
            </Box>
          )}
        </CardContent>
      </Card>

      {/* Main Content Tabs */}
      <Card elevation={0}>
        <CardContent sx={{ pb: 0 }}>
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="audio tabs">
            <Tab icon={<Audiotrack />} label="Transcription" />
            <Tab icon={<SentimentSatisfied />} label="Emotion Analysis" />
            <Tab icon={<Mic />} label="Speaker ID" />
            <Tab icon={<MusicNote />} label="Music Analysis" />
          </Tabs>
        </CardContent>

        {/* Transcription Tab */}
        <TabPanel value={tabValue} index={0}>
          {!selectedAudio ? (
            <Box sx={{ textAlign: 'center', py: 8 }}>
              <Audiotrack sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
              <Typography variant="h6" color="text.secondary">
                Upload an audio file to begin transcription
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                Supported formats: MP3, WAV, M4A, FLAC
              </Typography>
            </Box>
          ) : transcriptionLoading ? (
            <Box>
              <Typography variant="h6" sx={{ mb: 2 }}>Transcribing Audio...</Typography>
              <LinearProgress sx={{ mb: 3 }} />
              <Skeleton variant="rectangular" width="100%" height={200} sx={{ borderRadius: 1 }} />
            </Box>
          ) : transcription ? (
            <Grid container spacing={3}>
              <Grid item xs={12} md={8}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Transcription Result
                    </Typography>
                    <Box sx={{
                      p: 2,
                      bgcolor: 'grey.50',
                      borderRadius: 1,
                      minHeight: 150,
                      whiteSpace: 'pre-wrap'
                    }}>
                      {transcription.text || 'No transcription available'}
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              <Grid item xs={12} md={4}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Analysis Details
                    </Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Language:</Typography>
                        <Typography variant="body2">{transcription.language || 'Unknown'}</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Confidence:</Typography>
                        <Typography variant="body2">
                          {transcription.confidence ? `${(transcription.confidence * 100).toFixed(1)}%` : 'N/A'}
                        </Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Duration:</Typography>
                        <Typography variant="body2">{transcription.duration?.toFixed(1) || 0}s</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Speakers:</Typography>
                        <Typography variant="body2">{transcription.speakers?.length || 0}</Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              {/* Segments Table */}
              {transcription.segments && transcription.segments.length > 0 && (
                <Grid item xs={12}>
                  <Card elevation={1}>
                    <CardContent>
                      <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                        Transcription Segments
                      </Typography>
                      <TableContainer component={Paper} elevation={0}>
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell>Time</TableCell>
                              <TableCell>Text</TableCell>
                              <TableCell>Confidence</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {transcription.segments.map((segment, index) => (
                              <TableRow key={index} hover>
                                <TableCell>
                                  {segment.start.toFixed(1)}s - {segment.end.toFixed(1)}s
                                </TableCell>
                                <TableCell>{segment.text}</TableCell>
                                <TableCell>
                                  <Chip
                                    label={`${(segment.confidence * 100).toFixed(0)}%`}
                                    size="small"
                                    color="primary"
                                  />
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </CardContent>
                  </Card>
                </Grid>
              )}
            </Grid>
          ) : (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" color="text.secondary">
                No transcription results available
              </Typography>
            </Box>
          )}
        </TabPanel>

        {/* Emotion Analysis Tab */}
        <TabPanel value={tabValue} index={1}>
          {!selectedAudio ? (
            <Box sx={{ textAlign: 'center', py: 8 }}>
              <SentimentSatisfied sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
              <Typography variant="h6" color="text.secondary">
                Upload an audio file to analyze emotions
              </Typography>
            </Box>
          ) : emotionLoading ? (
            <Box>
              <Typography variant="h6" sx={{ mb: 2 }}>Analyzing Emotions...</Typography>
              <LinearProgress sx={{ mb: 3 }} />
              <Skeleton variant="rectangular" width="100%" height={300} sx={{ borderRadius: 1 }} />
            </Box>
          ) : emotionAnalysis ? (
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Overall Sentiment
                    </Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Overall Sentiment:</Typography>
                        <Chip
                          label={emotionAnalysis.overall_sentiment}
                          color={getEmotionColor(emotionAnalysis.overall_sentiment) as any}
                          sx={{ mt: 0.5 }}
                        />
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Dominant Emotion:</Typography>
                        <Chip
                          label={emotionAnalysis.dominant_emotion}
                          color={getEmotionColor(emotionAnalysis.dominant_emotion) as any}
                          sx={{ mt: 0.5 }}
                        />
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Processing Time:</Typography>
                        <Typography variant="body2">{emotionAnalysis.processing_time_ms}ms</Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              <Grid item xs={12} md={6}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Emotion Timeline
                    </Typography>
                    <Box sx={{ height: 200, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                      <Typography variant="body2" color="text.secondary">
                        Emotion timeline visualization would be implemented here
                      </Typography>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              {/* Emotion Details */}
              <Grid item xs={12}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Detailed Emotions
                    </Typography>
                    <TableContainer component={Paper} elevation={0}>
                      <Table>
                        <TableHead>
                          <TableRow>
                            <TableCell>Emotion</TableCell>
                            <TableCell>Confidence</TableCell>
                            <TableCell>Timestamp</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {emotionAnalysis.emotions?.map((emotion, index) => (
                            <TableRow key={index} hover>
                              <TableCell>
                                <Chip
                                  label={emotion.emotion}
                                  color={getEmotionColor(emotion.emotion) as any}
                                  size="small"
                                />
                              </TableCell>
                              <TableCell>
                                <Chip
                                  label={`${(emotion.confidence * 100).toFixed(1)}%`}
                                  size="small"
                                  variant="outlined"
                                />
                              </TableCell>
                              <TableCell>{emotion.timestamp.toFixed(1)}s</TableCell>
                            </TableRow>
                          )) || (
                            <TableRow>
                              <TableCell colSpan={3} align="center">
                                <Typography variant="body2" color="text.secondary">
                                  No emotion data available
                                </Typography>
                              </TableCell>
                            </TableRow>
                          )}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          ) : (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" color="text.secondary">
                No emotion analysis results available
              </Typography>
            </Box>
          )}
        </TabPanel>

        {/* Speaker Identification Tab */}
        <TabPanel value={tabValue} index={2}>
          {!selectedAudio ? (
            <Box sx={{ textAlign: 'center', py: 8 }}>
              <Mic sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
              <Typography variant="h6" color="text.secondary">
                Upload an audio file to identify speakers
              </Typography>
            </Box>
          ) : speakerLoading ? (
            <Box>
              <Typography variant="h6" sx={{ mb: 2 }}>Identifying Speakers...</Typography>
              <LinearProgress sx={{ mb: 3 }} />
              <Skeleton variant="rectangular" width="100%" height={300} sx={{ borderRadius: 1 }} />
            </Box>
          ) : speakerId ? (
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Speaker Analysis Results
                    </Typography>

                    <Box sx={{ mb: 3 }}>
                      <Typography variant="body2" color="text.secondary">
                        Total Speakers Detected: {speakerId.total_speakers}
                      </Typography>
                    </Box>

                    <TableContainer component={Paper} elevation={0}>
                      <Table>
                        <TableHead>
                          <TableRow>
                            <TableCell>Speaker ID</TableCell>
                            <TableCell>Confidence</TableCell>
                            <TableCell>Segments</TableCell>
                            <TableCell>Estimated Age</TableCell>
                            <TableCell>Estimated Gender</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {speakerId.speakers?.map((speaker, index) => (
                            <TableRow key={index} hover>
                              <TableCell>
                                <Chip
                                  label={speaker.speaker_id}
                                  color="primary"
                                  size="small"
                                />
                              </TableCell>
                              <TableCell>
                                <Chip
                                  label={`${(speaker.confidence * 100).toFixed(1)}%`}
                                  size="small"
                                  variant="outlined"
                                />
                              </TableCell>
                              <TableCell>{speaker.segments.length} segments</TableCell>
                              <TableCell>{speaker.estimated_age || 'N/A'}</TableCell>
                              <TableCell>{speaker.estimated_gender || 'N/A'}</TableCell>
                            </TableRow>
                          )) || (
                            <TableRow>
                              <TableCell colSpan={5} align="center">
                                <Typography variant="body2" color="text.secondary">
                                  No speaker data available
                                </Typography>
                              </TableCell>
                            </TableRow>
                          )}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          ) : (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" color="text.secondary">
                No speaker identification results available
              </Typography>
            </Box>
          )}
        </TabPanel>

        {/* Music Analysis Tab */}
        <TabPanel value={tabValue} index={3}>
          {!selectedAudio ? (
            <Box sx={{ textAlign: 'center', py: 8 }}>
              <MusicNote sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
              <Typography variant="h6" color="text.secondary">
                Upload an audio file to analyze music
              </Typography>
            </Box>
          ) : musicLoading ? (
            <Box>
              <Typography variant="h6" sx={{ mb: 2 }}>Analyzing Music...</Typography>
              <LinearProgress sx={{ mb: 3 }} />
              <Skeleton variant="rectangular" width="100%" height={300} sx={{ borderRadius: 1 }} />
            </Box>
          ) : musicAnalysis ? (
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Music Analysis Results
                    </Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Genre:</Typography>
                        <Chip label={musicAnalysis.genre} color="primary" sx={{ mt: 0.5 }} />
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Tempo:</Typography>
                        <Typography variant="body2">{musicAnalysis.tempo} BPM</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Key:</Typography>
                        <Typography variant="body2">{musicAnalysis.key}</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Mood:</Typography>
                        <Chip label={musicAnalysis.mood} color="secondary" sx={{ mt: 0.5 }} />
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              <Grid item xs={12} md={6}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Audio Features
                    </Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Danceability:</Typography>
                        <Typography variant="body2">{(musicAnalysis.features.danceability * 100).toFixed(1)}%</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Energy:</Typography>
                        <Typography variant="body2">{(musicAnalysis.features.energy * 100).toFixed(1)}%</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Valence:</Typography>
                        <Typography variant="body2">{(musicAnalysis.features.valence * 100).toFixed(1)}%</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">Acousticness:</Typography>
                        <Typography variant="body2">{(musicAnalysis.features.acousticness * 100).toFixed(1)}%</Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              <Grid item xs={12}>
                <Card elevation={1}>
                  <CardContent>
                    <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
                      Detected Instruments
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                      {musicAnalysis.instruments?.map((instrument, index) => (
                        <Chip
                          key={index}
                          label={instrument}
                          variant="outlined"
                          color="info"
                        />
                      )) || (
                        <Typography variant="body2" color="text.secondary">
                          No instruments detected
                        </Typography>
                      )}
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          ) : (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" color="text.secondary">
                No music analysis results available
              </Typography>
            </Box>
          )}
        </TabPanel>
      </Card>

      {/* Settings Dialog */}
      <Dialog
        open={showSettingsDialog}
        onClose={() => setShowSettingsDialog(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Settings sx={{ color: 'primary.main' }} />
            <Typography variant="h6">Audio AI Settings</Typography>
          </Box>
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                Configure audio processing and analysis settings.
              </Typography>
            </Grid>

            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Transcription Model</InputLabel>
                <Select value={transcriptionModel} onChange={(e) => setTranscriptionModel(e.target.value)}>
                  <MenuItem value="whisper-large-v3">Whisper Large V3 (High Quality)</MenuItem>
                  <MenuItem value="whisper-medium">Whisper Medium (Balanced)</MenuItem>
                  <MenuItem value="whisper-base">Whisper Base (Fast)</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Language</InputLabel>
                <Select defaultValue="en">
                  <MenuItem value="en">English</MenuItem>
                  <MenuItem value="es">Spanish</MenuItem>
                  <MenuItem value="fr">French</MenuItem>
                  <MenuItem value="de">German</MenuItem>
                  <MenuItem value="auto">Auto-detect</MenuItem>
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowSettingsDialog(false)}>Cancel</Button>
          <Button
            onClick={() => setShowSettingsDialog(false)}
            variant="contained"
          >
            Save Settings
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default AudioWorkstation;